using System;
using System.Threading.Tasks;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using static LazyMagic.DotNetUtils;
using static LazyMagic.LzLogger;
using System.Text;

namespace LazyMagic
{
    public class DotNetAppSyncEventsSDKProject : DotNetProjectBase
    {
        #region Properties
        public override string Template { get; set; } = "ProjectTemplates/AppSyncEventsSDK";
        public override string OutputFolder { get; set; } = "ClientSDKs";

        public override string ProjectFilePath
        {
            get => ExportedProjectPath;
            set => ExportedProjectPath = value;
        }

        public string ExportedEventApiArn { get; set; } = "";
        public string ExportedEventApiEndpoint { get; set; } = "";
        #endregion

        public override async Task GenerateAsync(SolutionBase solution, DirectiveBase directiveArg)
        {
            var projectName = "";
            try
            {
                await Task.Delay(0);
                Api directive = (Api)directiveArg;
                var apiPath = directive.Key;

                // Set the project name and namespace
                projectName = directive.Key;
                projectName += NameSuffix ?? "";
                var nameSpace = projectName;
                Info($"Generating {directive.Key} {projectName}");

                // Add AppSync Events specific package references
                PackageReferences.Add("AWSSDK.AppSync");
                PackageReferences.Add("AWSSDK.Extensions.NETCore.Setup");
                PackageReferences.Add("System.Text.Json");
                PackageReferences.Add("Microsoft.Extensions.DependencyInjection.Abstractions");
                PackageReferences.Add("Microsoft.Extensions.Logging.Abstractions");

                // Copy the template project to the target project
                var sourceProjectDir = CombinePath(solution.SolutionRootFolderPath, Template);
                var targetProjectDir = CombinePath(solution.SolutionRootFolderPath, Path.Combine(OutputFolder, projectName));
                var csprojFileName = GetCsprojFile(sourceProjectDir);
                var filesToExclude = new List<string> { csprojFileName, "User.props", "SRCREADME.md" };
                CopyProject(sourceProjectDir, targetProjectDir, filesToExclude);

                // Create/Update the project file
                File.Copy(
                    Path.Combine(sourceProjectDir, csprojFileName),
                    Path.Combine(targetProjectDir, projectName + ".csproj"),
                    overwrite: true);

                GenerateCommonProjectFiles(sourceProjectDir, targetProjectDir);

                // Generate AppSync Events client classes
                GenerateAppSyncEventsClient(targetProjectDir, nameSpace, projectName);
                GenerateSessionEventModels(targetProjectDir, nameSpace);
                GenerateServiceRegistrationExtensions(targetProjectDir, nameSpace);

                // Exports
                ExportedProjectPath = Path.Combine(OutputFolder, projectName, projectName + ".csproj");
                ExportedName = projectName;
                ExportedGlobalUsings.Add(nameSpace);
                ExportedServiceRegistrations.Add($"AddAppSyncEventsClient");

            }
            catch (Exception ex)
            {
                throw new Exception($"Error generating {GetType().Name} for {projectName}, {ex.Message}");
            }
        }

        private void GenerateAppSyncEventsClient(string targetProjectDir, string nameSpace, string projectName)
        {
            var clientCode = $@"// Generated by LazyMagic - modifications will be overwritten
using Amazon.AppSync;
using Amazon.AppSync.Model;
using Microsoft.Extensions.Logging;
using System.Text.Json;

namespace {nameSpace};

public interface IAppSyncEventsClient
{{
    Task<string> SubscribeToSessionEventsAsync(string sessionId, CancellationToken cancellationToken = default);
    Task PublishSessionEventAsync(string sessionId, SessionEvent sessionEvent, CancellationToken cancellationToken = default);
    Task UnsubscribeFromSessionEventsAsync(string subscriptionId, CancellationToken cancellationToken = default);
}}

public class AppSyncEventsClient : IAppSyncEventsClient
{{
    private readonly IAmazonAppSync _appSyncClient;
    private readonly ILogger<AppSyncEventsClient> _logger;
    private readonly string _eventApiId;

    public AppSyncEventsClient(IAmazonAppSync appSyncClient, ILogger<AppSyncEventsClient> logger, string eventApiId)
    {{
        _appSyncClient = appSyncClient ?? throw new ArgumentNullException(nameof(appSyncClient));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        _eventApiId = eventApiId ?? throw new ArgumentNullException(nameof(eventApiId));
    }}

    public async Task<string> SubscribeToSessionEventsAsync(string sessionId, CancellationToken cancellationToken = default)
    {{
        try
        {{
            // TODO: Implement actual AppSync Events subscription
            // This is a stub implementation for now
            _logger.LogInformation(""Subscribed to session events for session {{SessionId}}"", sessionId);
            await Task.Delay(10, cancellationToken);
            return $""subscription-{{sessionId}}-{{Guid.NewGuid():N}}""; // Return subscription ID
        }}
        catch (Exception ex)
        {{
            _logger.LogError(ex, ""Failed to subscribe to session events for session {{SessionId}}"", sessionId);
            throw;
        }}
    }}

    public async Task PublishSessionEventAsync(string sessionId, SessionEvent sessionEvent, CancellationToken cancellationToken = default)
    {{
        try
        {{
            // TODO: Implement actual AppSync Events publishing
            // This is a stub implementation for now
            var eventData = JsonSerializer.Serialize(sessionEvent);
            _logger.LogInformation(""Publishing event to session {{SessionId}}: {{EventType}}"", sessionId, sessionEvent.Type);
            _logger.LogDebug(""Event data: {{EventData}}"", eventData);
            await Task.Delay(10, cancellationToken);
        }}
        catch (Exception ex)
        {{
            _logger.LogError(ex, ""Failed to publish event to session {{SessionId}}"", sessionId);
            throw;
        }}
    }}

    public async Task UnsubscribeFromSessionEventsAsync(string subscriptionId, CancellationToken cancellationToken = default)
    {{
        try
        {{
            _logger.LogInformation(""Unsubscribing from session events: {{SubscriptionId}}"", subscriptionId);
            // Actual unsubscribe logic would go here
            await Task.CompletedTask;
        }}
        catch (Exception ex)
        {{
            _logger.LogError(ex, ""Failed to unsubscribe from session events: {{SubscriptionId}}"", subscriptionId);
            throw;
        }}
    }}
}}";

            File.WriteAllText(Path.Combine(targetProjectDir, "AppSyncEventsClient.g.cs"), clientCode);
        }

        private void GenerateSessionEventModels(string targetProjectDir, string nameSpace)
        {
            var modelsCode = $@"// Generated by LazyMagic - modifications will be overwritten
using System.Text.Json.Serialization;

namespace {nameSpace};

public class SessionEvent
{{
    [JsonPropertyName(""type"")]
    public string Type {{ get; set; }} = string.Empty;

    [JsonPropertyName(""timestamp"")]
    public DateTime Timestamp {{ get; set; }} = DateTime.UtcNow;

    [JsonPropertyName(""sessionId"")]
    public string SessionId {{ get; set; }} = string.Empty;

    [JsonPropertyName(""data"")]
    public object? Data {{ get; set; }}
}}

public class ChatMessageEvent : SessionEvent
{{
    public ChatMessageEvent()
    {{
        Type = ""ChatMessage"";
    }}

    [JsonPropertyName(""message"")]
    public string Message {{ get; set; }} = string.Empty;

    [JsonPropertyName(""role"")]
    public string Role {{ get; set; }} = string.Empty;
}}

public class SessionStatusEvent : SessionEvent
{{
    public SessionStatusEvent()
    {{
        Type = ""SessionStatus"";
    }}

    [JsonPropertyName(""status"")]
    public string Status {{ get; set; }} = string.Empty;
}}

public class ErrorEvent : SessionEvent
{{
    public ErrorEvent()
    {{
        Type = ""Error"";
    }}

    [JsonPropertyName(""error"")]
    public string Error {{ get; set; }} = string.Empty;
}}";

            File.WriteAllText(Path.Combine(targetProjectDir, "SessionEventModels.g.cs"), modelsCode);
        }

        private void GenerateServiceRegistrationExtensions(string targetProjectDir, string nameSpace)
        {
            var extensionsCode = $@"// Generated by LazyMagic - modifications will be overwritten
using Amazon.AppSync;
using Amazon.Extensions.NETCore.Setup;
using Microsoft.Extensions.DependencyInjection;

namespace {nameSpace};

public static class ServiceCollectionExtensions
{{
    public static IServiceCollection AddAppSyncEventsClient(this IServiceCollection services)
    {{
        services.AddAWSService<IAmazonAppSync>();
        services.AddScoped<IAppSyncEventsClient, AppSyncEventsClient>();
        return services;
    }}

    public static IServiceCollection AddAppSyncEventsClient(this IServiceCollection services, string eventApiId)
    {{
        services.AddAWSService<IAmazonAppSync>();
        services.AddScoped<IAppSyncEventsClient>(provider =>
        {{
            var appSyncClient = provider.GetRequiredService<IAmazonAppSync>();
            var logger = provider.GetRequiredService<Microsoft.Extensions.Logging.ILogger<AppSyncEventsClient>>();
            return new AppSyncEventsClient(appSyncClient, logger, eventApiId);
        }});
        return services;
    }}
}}";

            File.WriteAllText(Path.Combine(targetProjectDir, "ServiceCollectionExtensions.g.cs"), extensionsCode);
        }
    }
}