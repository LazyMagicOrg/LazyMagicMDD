<Project Sdk="Microsoft.NET.Sdk">
	<Import Project="..\Version.props"/>
	<PropertyGroup>
		<OutputType>Exe</OutputType>
		<TargetFramework>net8.0</TargetFramework>
		<Authors>Timothy May, Thomas May</Authors>
		<Company>Insight Sciences Corporation</Company>
		<Copyright>Copyright (c) 2021 - 2024 Insight Sciences Corporation. All rights reserved.</Copyright>
		<PackageLicenseFile>LICENSE.txt</PackageLicenseFile>
		<RequireLicenseAcceptance>true</RequireLicenseAcceptance>
		<SignAssembly>false</SignAssembly>
		<IncludeSymbols>true</IncludeSymbols>
		<SymbolPackageFormat>snupkg</SymbolPackageFormat>
		<GeneratePackageOnBuild>true</GeneratePackageOnBuild>
		<PackageOutputPath>../Packages</PackageOutputPath>

		<PackAsTool>true</PackAsTool>
		<ToolCommandName>LazyMagic</ToolCommandName>
		
		<Title>LazyMagic .NET CLI Tool</Title>
		<Description>
			LazyMagic is a tool that ingests an OpenApi (swagger) REST API specification and generates the AWS Serverless
			Application Model (SAM) template and the C# AWS Lambda projects necessary to stand up a fully featured
			commercial-grade application stack in AWS. It also generates a client application SDK making it simple to
			call that stack from C# applications.
		</Description>
		<Summary>
			LazyMagic is a tool that ingests an OpenApi (swagger) REST API specification and generates the AWS Serverless
			Application Model (SAM) template and the C# AWS Lambda projects necessary to stand up a fully featured
			commercial-grade application stack in AWS. It also generates a client application SDK making it simple to
			call that stack from C# applications.
		</Summary>
	</PropertyGroup>

	<ItemGroup>
		<None Include="LICENSE.txt" Pack="true" PackagePath=""/>
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\LazyMagicGenerator\LazyMagicGenerator.csproj" />
	</ItemGroup>

	<Target Name="Create Package Folder" BeforeTargets="Build">
		<MakeDir Directories="..\Packages" />
	</Target>
	
	<Target Name="DeletePackage" AfterTargets="Build">
		<MSBuild Projects="$(MSBuildProjectFile)" Targets="DeleteSpecificPackage" Properties="Configuration=$(Configuration)" />
	</Target>


	<Target Name="DeleteSpecificPackage">
		<PropertyGroup>
			<PackageCacheFolder Condition=" '$(OS)' == 'Windows_NT' ">$(UserProfile)\.nuget\packages\$(AssemblyName)\$(Version)</PackageCacheFolder>
			<PackageCacheFolder Condition=" '$(OS)' != 'Windows_NT' ">$(Home)/.nuget/packages/$(AssemblyName)/$(Version)</PackageCacheFolder>
		</PropertyGroup>

		<Message Importance="high" Text="Attempting to delete package $(AssemblyName) version $(Version) from cache folder $(PackageCacheFolder)" />
		<!-- Windows-specific delete command -->
		<Exec Condition=" '$(OS)' == 'Windows_NT' AND Exists('$(PackageCacheFolder)')"
			  Command="cmd.exe /c &quot;if exist &quot;$(PackageCacheFolder)&quot; rmdir /s /q &quot;$(PackageCacheFolder)&quot;&quot;"
			  ContinueOnError="true">
			<Output TaskParameter="ExitCode" PropertyName="ErrorCode"/>
		</Exec>

		<!-- Unix/Linux/Mac-specific delete command -->
		<Exec Condition=" '$(OS)' != 'Windows_NT' AND Exists('$(PackageCacheFolder)')"
			  Command="rm -rf &quot;$(PackageCacheFolder)&quot;"
			  ContinueOnError="true">
			<Output TaskParameter="ExitCode" PropertyName="ErrorCode"/>
		</Exec>
		<Message Condition="'$(ErrorCode)' != '0'" Importance="high" Text="Failed to delete package. Error code: $(ErrorCode)" />
		<Message Condition="'$(ErrorCode)' == '0'" Importance="high" Text="Successfully deleted package from $(PackageCacheFolder)" />
	</Target>	
	
</Project>
